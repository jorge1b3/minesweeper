function Minesweeper.new 0
push constant 6
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
pop this 2
push this 1
push this 0
call Math.multiply 2
call Array.new 1
pop this 3
push constant 0
pop this 4
push constant 0
pop this 5
push pointer 0
return
function Minesweeper.is_game_over 0
push argument 0
pop pointer 0
push this 5
return
function Minesweeper.initialize_board 8
push argument 0
pop pointer 0
push this 2
call Array.new 1
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 2
lt
not
if-goto WHILE_END0
push constant 20
call Random.setSeed 1
pop temp 0
push this 1
push this 0
call Math.multiply 2
call Random.randRange 1
pop local 2
push local 2
push this 0
call Math.divide 2
pop local 3
push local 2
push local 3
push this 0
call Math.multiply 2
sub
pop local 4
push local 3
push this 0
call Math.multiply 2
push local 4
add
push this 3
add
pop pointer 1
push that 0
pop local 7
push local 7
call Cell.is_mine 1
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 7
push constant 0
not
call Cell.set_mine 2
pop temp 0
push constant 0
push local 3
push constant 1
sub
call Math.max 2
pop local 5
push constant 0
push local 4
push constant 1
sub
call Math.max 2
pop local 6
label WHILE_EXP1
push local 5
push this 1
push local 3
push constant 2
add
call Math.min 2
lt
not
if-goto WHILE_END1
label WHILE_EXP2
push local 6
push this 0
push local 4
push constant 2
add
call Math.min 2
lt
not
if-goto WHILE_END2
push local 5
push this 0
call Math.multiply 2
push local 6
add
push this 3
add
pop pointer 1
push that 0
pop local 7
push local 7
push local 7
call Cell.adjacent_mines 1
push constant 1
add
call Cell.set_adjacent_mines 2
pop temp 0
push local 6
push constant 1
add
pop local 6
goto WHILE_EXP2
label WHILE_END2
push local 5
push constant 1
add
pop local 5
goto WHILE_EXP1
label WHILE_END1
push local 1
push constant 1
add
pop local 1
label IF_FALSE0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Minesweeper.reveal_cell 7
push argument 0
pop pointer 0
push argument 1
push this 0
call Math.multiply 2
push argument 2
add
push this 3
add
pop pointer 1
push that 0
pop local 0
push argument 1
push constant 0
lt
push argument 1
push this 1
gt
or
push argument 1
push this 1
eq
or
push argument 2
push constant 0
lt
push argument 2
push this 0
gt
or
push argument 2
push this 0
gt
or
push local 0
call Cell.is_revealed 1
or
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push this 1
push this 0
call Math.multiply 2
call Stack.new 1
pop local 1
push local 1
push argument 1
push this 0
call Math.multiply 2
push argument 2
add
call Stack.push 2
pop temp 0
label WHILE_EXP0
push local 1
call Stack.size 1
push constant 0
gt
not
if-goto WHILE_END0
push local 5
push this 0
call Math.divide 2
push local 5
push local 5
push this 0
call Math.divide 2
sub
push this 0
call Math.multiply 2
call Math.multiply 2
push local 5
add
push local 5
push this 0
call Math.divide 2
sub
push this 0
call Math.multiply 2
push this 3
add
pop pointer 1
push that 0
pop local 0
push local 1
call Stack.pop 1
pop local 5
push local 0
pop local 6
push local 6
call Cell.is_revealed 1
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 6
push constant 0
not
call Cell.set_revealed 2
pop temp 0
push this 4
push constant 1
add
pop this 4
push local 6
call Cell.is_mine 1
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
not
pop this 5
push constant 0
return
label IF_FALSE2
push local 6
call Cell.adjacent_mines 1
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
push argument 1
push constant 1
sub
call Math.max 2
pop local 3
push constant 0
push argument 2
push constant 1
sub
call Math.max 2
pop local 4
label WHILE_EXP1
push local 3
push this 1
push argument 1
push constant 2
add
call Math.min 2
lt
not
if-goto WHILE_END1
label WHILE_EXP2
push local 4
push this 0
push argument 2
push constant 2
add
call Math.min 2
lt
not
if-goto WHILE_END2
push local 1
push local 3
push this 0
call Math.multiply 2
push local 4
add
call Stack.push 2
pop temp 0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP2
label WHILE_END2
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP1
label WHILE_END1
label IF_FALSE3
label IF_FALSE1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Minesweeper.print_board 6
push argument 0
pop pointer 0
push constant 2
call String.new 1
push constant 32
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 0
lt
not
if-goto WHILE_END0
push local 0
push constant 97
add
call String.setInt 1
pop local 5
push local 4
call Output.printString 1
pop temp 0
push constant 1
call String.new 1
push constant 32
call String.appendChar 2
call Output.printChar 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
call Output.println 0
pop temp 0
push constant 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP1
push local 1
push this 1
lt
not
if-goto WHILE_END1
push local 1
push constant 97
add
call String.setInt 1
pop local 5
push local 5
call Output.printString 1
pop temp 0
push constant 1
call String.new 1
push constant 32
call String.appendChar 2
call Output.printChar 1
pop temp 0
label WHILE_EXP2
push local 2
push this 0
lt
not
if-goto WHILE_END2
push local 1
push this 0
call Math.multiply 2
push local 2
add
push this 3
add
pop pointer 1
push that 0
pop local 3
push local 3
call Cell.is_revealed 1
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 2
call String.new 1
push constant 45
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printChar 1
pop temp 0
goto IF_END0
label IF_FALSE0
push local 3
call Cell.is_mine 1
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 2
call String.new 1
push constant 88
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printChar 1
pop temp 0
goto IF_END1
label IF_FALSE1
push local 3
call Cell.adjacent_mines 1
call Output.printInt 1
pop temp 0
push constant 1
call String.new 1
push constant 32
call String.appendChar 2
call Output.printChar 1
pop temp 0
label IF_END1
label IF_END0
push local 2
push constant 1
add
pop local 2
call Output.println 0
pop temp 0
goto WHILE_EXP2
label WHILE_END2
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
function Minesweeper.is_win 0
push argument 0
pop pointer 0
push this 4
push this 1
push this 0
call Math.multiply 2
push this 2
sub
eq
push this 5
not
and
return
